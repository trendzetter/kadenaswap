(load "relay.repl")
(namespace 'test)
(env-data
    {  'delegated-bonding-admin: ['admin], 'George: ['george], 'Alice: ['alice], 'Pam: ['pam], 'Bob: ['bob], 'Admin: ['admin]
     , 'ns: 'test
     , 'relay-coin-account: 'delegated-bonding-bank
     , 'lockup: 30
     , 'unlock: 20
     , 'bond: 10000
     , 'upgrade: false})

     (begin-tx)
     ;(define-keyset 'delegated-bonding-admin)
     ;(env-keys ['admin])
     ; Load the module into the namespace test
     (load "delegated-bonding.pact")
     (commit-tx)

(begin-tx)
(test-capability (coin.COINBASE))
(coin.coinbase "George" (read-keyset 'George) 150000.0)
(coin.coinbase "Alice" (read-keyset 'Alice) 150000.0)
(coin.coinbase "Pam" (read-keyset 'Pam) 150000.0)
(coin.coinbase "Bob" (read-keyset 'Bob) 150000.0)
(coin.coinbase "Admin" (read-keyset 'Admin) 200000.0)

(env-sigs
  [{'key: "admin",'caps: [(coin.TRANSFER "Admin" 'relay-bank 200000.0)]}])
(test.pool.fund-reserve test.relay.POOL "Admin" 200000.0)
(commit-tx)


(env-chain-data { 'block-time: (parse-time "%F" "2021-03-17")})
(begin-tx)
(env-sigs
  [ {'key: "pam",'caps: [(test.pool.BONDER "Pam:2021-01-01")]}])

(test.pool.unbond "Pam:2021-01-01")
(test.pool.get-pool test.relay.POOL)
(commit-tx)


(begin-tx)
; create new slot
(expect "new-slot: success multi1"
  "Slot multi1 added"
  (test.delegated-bonding.new-slot 'multi1 10000.0 'George (read-keyset 'George) 2.0))

(test.delegated-bonding.get-slot 'multi1)


(expect "new-slot: success multi2"
    "Slot multi2 added"
  (test.delegated-bonding.new-slot 'multi2 10000.0 'George (read-keyset 'George) 3.0))

; create new slot
(expect "new-slot: success multi3"
  "Slot multi3 added"
  (test.delegated-bonding.new-slot 'multi3 10000.0 'George (read-keyset 'George) 2.0))

; create new slot
(expect "new-slot: success multi4"
  "Slot multi4 added"
  (test.delegated-bonding.new-slot 'multi4 10000.0 'George (read-keyset 'George) 2.0))

; create new slot
(expect "new-slot: success multi5"
  "Slot multi5 added"
  (test.delegated-bonding.new-slot 'multi5 10000.0 'George (read-keyset 'George) 2.0))

; create new slot
(expect "new-slot: success multi6"
  "Slot multi6 added"
  (test.delegated-bonding.new-slot 'multi6 10000.0 'George (read-keyset 'George) 2.0))

;; Multi1
; Test max amount for slot
(env-sigs [{'key: "alice", 'caps: [(coin.TRANSFER "Alice" "multi1" 8000.0)] }])
(test.delegated-bonding.new-tranche "Alice" "multi1" 8000.0 (read-keyset "Alice"))
(expect "events new tranche Alice 1"
 [{"name": "test.delegated-bonding.RESERVE","params": ["Alice" 8000.0]}
  {"name": "coin.TRANSFER","params": ["Alice" "multi1" 8000.0]}]
(map (remove 'module-hash) (env-events true)))


; failures tests
(env-sigs [{'key: "george", 'caps: [(coin.TRANSFER "George" "multi1" 3000.0)] }])
(expect-failure "Tranche cannot be bigger than the remaining amount for the slot"
  (test.delegated-bonding.new-tranche "George" "multi1" 3000.0 (read-keyset "George")))

(env-sigs [{'key: "george", 'caps: [(coin.TRANSFER "George" "multi1" 2000.0)] }])
(expect-failure "Operator account cannot join the bond"
  (test.delegated-bonding.new-tranche "George" "multi1" 2000.0 (read-keyset "George")))


(env-sigs [{'key: "pam", 'caps: [(coin.TRANSFER "Pam" "multi1" 2000.0)] }])
(test.delegated-bonding.new-tranche "Pam" "multi1" 2000.0 (read-keyset "Pam"))
(expect "events new tranche Pam"
   [{"name": "test.delegated-bonding.RESERVE","params": ["Pam" 2000.0]}
    {"name": "coin.TRANSFER","params": ["Pam" "multi1" 2000.0]}]
  (map (remove 'module-hash) (env-events true)))
(commit-tx)


(test.delegated-bonding.get-slot-tranches 'multi1)

(begin-tx)
(env-sigs [{'key: "pam", 'caps: [(test.delegated-bonding.TRANCHE_GUARD "multi1:Pam")] }])
(test.delegated-bonding.cancel-tranche "multi1:Pam" )
(expect "events cancel tranche Pam"
    [{"name": "coin.TRANSFER","params": ["multi1" "Pam" 2000.0]}]
  (map (remove 'module-hash) (env-events true)))
(commit-tx)

; try to cancel it twice
(begin-tx)
(env-sigs [{'key: "pam", 'caps: [(test.delegated-bonding.TRANCHE_GUARD "multi1:Pam")] }])
(expect-failure "Cannot cancel tranche more than once"
(test.delegated-bonding.cancel-tranche "multi1:Pam" ))
(commit-tx)

(begin-tx)
(env-sigs [{'key: "bob", 'caps: [(coin.TRANSFER "Bob" "multi1" 2000.0)] }])
(test.delegated-bonding.new-tranche "Bob" "multi1" 2000.0 (read-keyset "Bob"))
(expect "events new tranche Bob"
    [{"name": "test.delegated-bonding.RESERVE","params": ["Bob" 2000.0]}
     {"name": "coin.TRANSFER","params": ["Bob" "multi1" 2000.0]}]
  (map (remove 'module-hash) (env-events true)))
(commit-tx)


(test.delegated-bonding.get-slot-tranches 'multi1)


(begin-tx)
(env-sigs [{'key: "george", 'caps: [(test.delegated-bonding.OPERATOR 'multi1)]}])
(expect "Multi1 activated"
  "multi1:2021-03-17"
(test.delegated-bonding.new-multibond 'multi1) )
(expect "events new bond multi1"
 [{"name": "coin.TRANSFER","params": ["multi1" "relay-bank" 10000.0]}
  {"name": "test.pool.BOND","params": ["kda-relay-pool" "multi1" 10000.0 30 0]}
  {"name": "test.pool.UPDATE","params": ["kda-relay-pool" 110000.0 233003.3]}
  {"name": "test.pool.ROTATE","params": ["multi1:2021-03-17"]}]
(map (remove 'module-hash) (env-events true)))
(commit-tx)


;; Multi2
(begin-tx)
(env-sigs [{'key: "alice", 'caps: [(coin.TRANSFER "Alice" "multi2" 4000.0)] }])
(test.delegated-bonding.new-tranche "Alice" "multi2" 4000.0 (read-keyset "Alice"))


(env-sigs [{'key: "pam", 'caps: [(coin.TRANSFER "Pam" "multi2" 6000.0)] }])
(test.delegated-bonding.new-tranche "Pam" "multi2" 6000.0 (read-keyset "Pam"))
(commit-tx)

(begin-tx)
(env-chain-data { 'block-time: (parse-time "%F" "2021-03-18")})
(env-sigs [{'key: "george", 'caps: [(test.delegated-bonding.OPERATOR 'multi2)]}])
(expect "Multi2 activated"
  "multi2:2021-03-18"
(test.delegated-bonding.new-multibond 'multi2) )
(commit-tx)


;; Multi3
(begin-tx)
(env-sigs [{'key: "alice", 'caps: [(coin.TRANSFER "Alice" "multi3" 8000.0)] }])
(expect "new-tranche: success Alice"
    "multi3:Alice"
(test.delegated-bonding.new-tranche "Alice" "multi3" 8000.0 (read-keyset "Alice")))

(env-sigs [{'key: "pam", 'caps: [(coin.TRANSFER "Pam" "multi3" 2000.0)] }])
(expect "new-tranche: success Pam"
    "multi3:Pam"
(test.delegated-bonding.new-tranche "Pam" "multi3" 2000.0 (read-keyset "Pam")))
(commit-tx)


; test sale of tranche
(begin-tx)
(env-sigs [{'key: "bob", 'caps: [(test.delegated-bonding.TRANCHE_GUARD "multi1:Bob")] }])
(expect-failure "bob cannot take the tranche himself"
  "Tx Failed: Keyset failure (keys-all): [pam]"
(test.delegated-bonding.rotate-tranche "multi3:Pam" (read-keyset 'Bob)))
(commit-tx)

(begin-tx)
(env-sigs [{'key: "pam", 'caps: [(test.delegated-bonding.TRANCHE_GUARD "multi3:Pam")] }])
(expect "Using pams guard a new hguard can be set for multi3:Pam"
  "Write succeeded"
(test.delegated-bonding.rotate-tranche "multi3:Pam" (read-keyset 'Bob)))
(commit-tx)

(begin-tx)
(env-sigs [{'key: "bob", 'caps: [(test.delegated-bonding.TRANCHE_GUARD "multi3:Pam")] }])
(expect "new acount for multi3:Pam"
  "Write succeeded"
(test.delegated-bonding.update-tranche-account "multi3:Pam" "Bob"))
(commit-tx)

(begin-tx)
(env-sigs [{'key: "george", 'caps: [(test.delegated-bonding.OPERATOR 'multi3)]}])
(expect "Multi3 activated"
  "multi3:2021-03-18"
(test.delegated-bonding.new-multibond 'multi3) )
(commit-tx)

;; Multi4
(begin-tx)
(env-sigs [{'key: "alice", 'caps: [(coin.TRANSFER "Alice" "multi4" 8000.0)] }])
(expect "new-tranche: success Alice"
    "multi4:Alice"
(test.delegated-bonding.new-tranche "Alice" "multi4" 8000.0 (read-keyset "Alice")))

(env-sigs [{'key: "pam", 'caps: [(coin.TRANSFER "Pam" "multi4" 2000.0)] }])
(expect "new-tranche: success Pam"
    "multi4:Pam"
(test.delegated-bonding.new-tranche "Pam" "multi4" 2000.0 (read-keyset "Pam")))
(commit-tx)

(begin-tx)
(env-sigs [{'key: "pam", 'caps: [(test.delegated-bonding.TRANCHE_GUARD "multi4:Pam")] }])
(test.delegated-bonding.cancel-tranche "multi4:Pam" )
(expect "events cancel tranche Pam"
    [{"name": "coin.TRANSFER","params": ["multi4" "Pam" 2000.0]}]
  (map (remove 'module-hash) (env-events true)))
(commit-tx)

(begin-tx)
(env-sigs [{'key: "bob", 'caps: [(coin.TRANSFER "Bob" "multi4" 2000.0)] }])
(expect "new-tranche: success Bob"
    "multi4:Bob"
(test.delegated-bonding.new-tranche "Bob" "multi4" 2000.0 (read-keyset "Bob")))
(commit-tx)

(begin-tx)
(env-sigs [{'key: "george", 'caps: [(test.delegated-bonding.OPERATOR 'multi4)]}])
(expect "Multi4 activated"
  "multi4:2021-03-18"
(test.delegated-bonding.new-multibond 'multi4) )
(commit-tx)

;; Multi5
(begin-tx)
(env-sigs [{'key: "alice", 'caps: [(coin.TRANSFER "Alice" "multi5" 8000.0)] }])
(expect "new-tranche: success Alice"
    "multi5:Alice"
(test.delegated-bonding.new-tranche "Alice" "multi5" 8000.0 (read-keyset "Alice")))

(env-sigs [{'key: "pam", 'caps: [(coin.TRANSFER "Pam" "multi5" 2000.0)] }])
(expect "new-tranche: success Pam"
    "multi5:Pam"
(test.delegated-bonding.new-tranche "Pam" "multi5" 2000.0 (read-keyset "Pam")))
(commit-tx)

(begin-tx)
(env-sigs [{'key: "george", 'caps: [(test.delegated-bonding.OPERATOR 'multi5)]}])
(expect "Multi5 activated"
  "multi5:2021-03-18"
(test.delegated-bonding.new-multibond 'multi5) )
(commit-tx)

;; Multi6
(begin-tx)
(env-sigs [{'key: "alice", 'caps: [(coin.TRANSFER "Alice" "multi6" 8000.0)] }])
(expect "new-tranche: success Alice"
    "multi6:Alice"
(test.delegated-bonding.new-tranche "Alice" "multi6" 8000.0 (read-keyset "Alice")))

(env-sigs [{'key: "pam", 'caps: [(coin.TRANSFER "Pam" "multi6" 2000.0)] }])
(expect "new-tranche: success Pam"
    "multi6:Pam"
(test.delegated-bonding.new-tranche "Pam" "multi6" 2000.0 (read-keyset "Pam")))
(commit-tx)
(begin-tx)
(env-sigs [{'key: "george", 'caps: [(test.delegated-bonding.OPERATOR 'multi6)]}])
(expect "Multi6 activated"
  "multi6:2021-03-18"
(test.delegated-bonding.new-multibond 'multi6) )
(commit-tx)


; ENDORSING
(begin-tx)
(map (remove 'module-hash) (env-events true))
(commit-tx)
(env-hash (hash 'envhash2))
(env-chain-data {'prev-block-hash: (hash 'prevblockhash11112)})
(env-data {'header: { 'hash: "h2", 'number: 1, 'receipts-root: "r2" }, 'George: ['george]})
(begin-tx)
(env-sigs [{'key: "george",'caps: [(test.relay.BONDER "multi1:2021-03-17")]}])

(expect "multi1 1 propose"
  "Write succeeded"
  (test.relay.propose
    (read-msg 'header)
    "multi1:2021-03-17"))
(expect "propose events"
      [{"name": "test.relay.PROPOSE","params": [1 "h2" "multi1:2021-03-17" ["multi2:2021-03-18" "multi3:2021-03-18" "multi4:2021-03-18" "multi5:2021-03-18" "multi6:2021-03-18"]]}]
   (map (remove 'module-hash) (env-events true)))
(expect-failure "not validated 0"
 "Not accepted"
 (test.relay.validate (read-msg 'header)))
(commit-tx)

(begin-tx)
 ;; endorser success
(env-sigs [{'key: "george",'caps: [(test.relay.BONDER "multi2:2021-03-18")]}])

(expect "endorse multi2:2021-03-18#"
 "Write succeeded"
 (test.relay.endorse (read-msg 'header) "multi2:2021-03-18"))
(expect "endorse events"
   [ {"name": "test.relay.ENDORSE","params": ["h2" "multi2:2021-03-18" false]}
    {"name": "test.pool.ACTIVITY","params": ["kda-relay-pool" "multi2:2021-03-18" 1]}]

  (map (remove 'module-hash) (env-events true)))
(expect "activity 1"
   1
   (at 'activity (test.pool.get-bond "multi2:2021-03-18")))
(expect-failure "not validated 1"
   "Not accepted"
   (test.relay.validate (read-msg 'header)))

(expect-failure "dupe failure"
  "Duplicate endorse"
  (test.relay.endorse (read-msg 'header) "multi2:2021-03-18"))
(commit-tx)

(begin-tx)
(env-sigs [{'key: "george",'caps: [(test.relay.BONDER "multi3:2021-03-18")]}])

(expect "endorse multi3:2021-03-18"
  "Write succeeded"
 (test.relay.endorse (read-msg 'header) "multi3:2021-03-18"))

(expect "endorse events"
   [ {"name": "test.relay.ENDORSE","params": ["h2" "multi3:2021-03-18" false]}
     {"name": "test.pool.ACTIVITY","params": ["kda-relay-pool" "multi3:2021-03-18" 1]}]
  (map (remove 'module-hash) (env-events true)))

(expect "activity 2"
  1
  (at 'activity (test.pool.get-bond "multi3:2021-03-18")))

(expect-failure "not validated 2"
  "Not accepted"
  (test.relay.validate (read-msg 'header)))

(env-sigs [{'key: "george",'caps: [(test.relay.BONDER "multi4:2021-03-18")]}])

(expect "endorse multi4:2021-03-18"
  "Write succeeded"
  (test.relay.endorse (read-msg 'header) "multi4:2021-03-18"))
(expect "endorse events"
   [ {"name": "test.relay.ENDORSE","params": ["h2" "multi4:2021-03-18" true]}
     {"name": "test.pool.ACTIVITY","params": ["kda-relay-pool" "multi4:2021-03-18" 1]}]

  (map (remove 'module-hash) (env-events true)))
(expect "activity 3"
  1
  (at 'activity (test.pool.get-bond "multi4:2021-03-18")))

(expect "validated 3" true
  (test.relay.validate (read-msg 'header)))
(commit-tx)


;; second header endore
(begin-tx)
(map (remove 'module-hash) (env-events true))
(commit-tx)
(env-hash (hash 'envhash2))
(env-chain-data {'prev-block-hash: (hash 'prevblockhash11112)})
(env-data {'header: { 'hash: "h3", 'number: 1, 'receipts-root: "r2" }, 'George: ['george]})
(begin-tx)
(env-sigs
  [ {'key: "george",'caps: [(test.relay.BONDER "multi6:2021-03-18")]}])

(expect "multi1 6 propose"
  "Write succeeded"
  (test.relay.propose
    (read-msg 'header)
    "multi6:2021-03-18"))
(expect "propose events"
      [{"name": "test.relay.PROPOSE","params": [1 "h3" "multi6:2021-03-18" ["multi1:2021-03-17" "multi2:2021-03-18" "multi3:2021-03-18" "multi4:2021-03-18" "multi5:2021-03-18"]]}]
   (map (remove 'module-hash) (env-events true)))
(expect-failure "not validated 0"
 "Not accepted"
 (test.relay.validate (read-msg 'header)))
(commit-tx)

(begin-tx)
 ;; endorser success
(env-sigs [{'key: "george",'caps: [(test.relay.BONDER "multi5:2021-03-18")]}])

(expect "endorse h3:2021-03-18#"
 "Write succeeded"
 (test.relay.endorse (read-msg 'header) "multi5:2021-03-18"))

(expect "endorse events"
   [ {"name": "test.relay.ENDORSE","params": ["h3" "multi5:2021-03-18" false]}
    {"name": "test.pool.ACTIVITY","params": ["kda-relay-pool" "multi5:2021-03-18" 1]}]
  (map (remove 'module-hash) (env-events true)))

(expect "activity 1"
   1
   (at 'activity (test.pool.get-bond "multi5:2021-03-18")))
(expect-failure "not validated 1"
   "Not accepted"
   (test.relay.validate (read-msg 'header)))

(expect-failure "dupe failure"
  "Duplicate endorse"
  (test.relay.endorse (read-msg 'header) "multi5:2021-03-18"))
(commit-tx)

(begin-tx)
(env-sigs [{'key: "george",'caps: [(test.relay.BONDER "multi4:2021-03-18")]}])

(expect "endorse multi4:2021-03-18"
  "Write succeeded"
 (test.relay.endorse (read-msg 'header) "multi4:2021-03-18"))
(expect "endorse events"
   [ {"name": "test.relay.ENDORSE","params": ["h3" "multi4:2021-03-18" false]}
     {"name": "test.pool.ACTIVITY","params": ["kda-relay-pool" "multi4:2021-03-18" 2]}]

  (map (remove 'module-hash) (env-events true)))
(expect "activity 2"
  2
  (at 'activity (test.pool.get-bond "multi4:2021-03-18")))
(expect-failure "not validated 2"
  "Not accepted"
  (test.relay.validate (read-msg 'header)))

(env-sigs
  [ {'key: "george",'caps: [(test.relay.BONDER "multi3:2021-03-18")]}])

(expect "endorse multi3:2021-03-18"
  "Write succeeded"
  (test.relay.endorse (read-msg 'header) "multi3:2021-03-18"))
(expect "endorse events"
   [ {"name": "test.relay.ENDORSE","params": ["h3" "multi3:2021-03-18" true]}
     {"name": "test.pool.ACTIVITY","params": ["kda-relay-pool" "multi3:2021-03-18" 2]}]

  (map (remove 'module-hash) (env-events true)))
(expect "activity 2"
  2
  (at 'activity (test.pool.get-bond "multi3:2021-03-18")))

(expect "validated 3" true
  (test.relay.validate (read-msg 'header)))
(commit-tx)


; RENEWALS
(begin-tx)
(env-chain-data { 'block-time: (parse-time "%F" "2021-03-20")})
(coin.get-balance 'George)
(coin.get-balance 'Pam)
(coin.get-balance 'Alice)


; renew too soon
(env-sigs
  [ {'key: "george",'caps: [(test.pool.BONDER "multi2:2021-03-18")]}])

(expect-failure "renew Alice 2: too soon"
  "Bond still active"
  (test.delegated-bonding.renew-multibond 'multi2))

(commit-tx)


; RENEW multi2
(env-chain-data { 'block-time: (parse-time "%F" "2021-05-05")})
(begin-tx)
(env-sigs
  [ {'key: "george",'caps: [(test.pool.BONDER "multi2:2021-03-18")
                            (test.delegated-bonding.OPERATOR "multi2") ]}])

; Try unbond directly on the pool
(expect-failure
  'delegated-bonding-admin
(test.pool.unbond "multi2:2021-03-18") )

(expect "renew multi2"
   ["Alice:1.94" "Pam:2.91"]
  (test.delegated-bonding.renew-multibond "multi2"))
(expect "renew events multi2 just activity fee"
  [{"name": "test.pool.BONDER","params": ["multi2:2021-03-18"]}
   {"name": "coin.TRANSFER","params": ["relay-bank" "multi2" 5.0]}
   {"name": "test.pool.FEE","params": ["kda-relay-pool" "multi2:2021-03-18" 5.0]}
   {"name": "test.pool.BOND","params": ["kda-relay-pool" "multi2" 10000.0 30 1]}
   {"name": "test.pool.UPDATE","params": ["kda-relay-pool" 160000.0 232998.3]}
   {"name": "coin.TRANSFER","params": ["multi2" "George" 0.15]}
   {"name": "coin.TRANSFER","params": ["multi2" "Alice" 1.94]}
   {"name": "coin.TRANSFER","params": ["multi2" "Pam" 2.91]}]
 (map (remove 'module-hash) (env-events true)))
(commit-tx)
(coin.get-balance 'multi2)
(coin.get-balance 'George)
(coin.get-balance 'Pam)
(coin.get-balance 'Alice)

; during renewal the control was rotated to the contract
; rotate the bond back to the operator
(begin-tx)
(env-sigs [{'key: "george", 'caps: [(test.delegated-bonding.OPERATOR 'multi2)]}])
(expect "rotate multi2"
   "operator:KeySet {keys: [george],pred: keys-all}"
  (test.delegated-bonding.rotate "multi2"))
(commit-tx)

; RENEW multi3
(begin-tx)
(env-sigs
  [ {'key: "george",'caps: [(test.pool.BONDER "multi3:2021-03-18")
                            (test.delegated-bonding.OPERATOR "multi3") ]}])
(expect "renew multi3"
 ["Alice:7.84" "Bob:1.96"]
(test.delegated-bonding.renew-multibond "multi3"))
(expect "renew events multi3 just 1 activity fee"
  [{"name": "test.pool.BONDER","params": ["multi3:2021-03-18"]}
   {"name": "coin.TRANSFER","params": ["relay-bank" "multi3" 10.0]}
   {"name": "test.pool.FEE","params": ["kda-relay-pool" "multi3:2021-03-18" 10.0]}
   {"name": "test.pool.BOND","params": ["kda-relay-pool" "multi3" 10000.0 30 1]}
   {"name": "test.pool.UPDATE","params": ["kda-relay-pool" 160000.0 232988.3]}
   {"name": "coin.TRANSFER","params": ["multi3" "George" 0.2]}
   {"name": "coin.TRANSFER","params": ["multi3" "Alice" 7.84]}
   {"name": "coin.TRANSFER","params": ["multi3" "Bob" 1.96]}]
 (map (remove 'module-hash) (env-events true)))
(commit-tx)

(coin.get-balance 'multi2)
(coin.get-balance 'George)
(coin.get-balance 'Pam)
(coin.get-balance 'Alice)

(begin-tx)
(env-sigs [{'key: "george", 'caps: [(test.delegated-bonding.OPERATOR 'multi3)]}])
(expect "rotate multi3"
   "operator:KeySet {keys: [george],pred: keys-all}"
  (test.delegated-bonding.rotate "multi3"))
(commit-tx)

; RENEW multi4
(begin-tx)
(env-sigs
  [ {'key: "george",'caps: [(test.pool.BONDER "multi4:2021-03-18")
                            (test.delegated-bonding.OPERATOR "multi4")]}])

(expect "renew multi4"
    ["Alice:7.84" "Bob:1.96"]
  (test.delegated-bonding.renew-multibond "multi4"))
(expect "renew events multi4 just 1 activity fee"
   [{"name": "test.pool.BONDER","params": ["multi4:2021-03-18"]}
    {"name": "coin.TRANSFER","params": ["relay-bank" "multi4" 10.0]}
    {"name": "test.pool.FEE","params": ["kda-relay-pool" "multi4:2021-03-18" 10.0]}
    {"name": "test.pool.BOND","params": ["kda-relay-pool" "multi4" 10000.0 30 1]}
    {"name": "test.pool.UPDATE","params": ["kda-relay-pool" 160000.0 232978.3]}
    {"name": "coin.TRANSFER","params": ["multi4" "George" 0.2]}
    {"name": "coin.TRANSFER","params": ["multi4" "Alice" 7.84]}
    {"name": "coin.TRANSFER","params": ["multi4" "Bob" 1.96]}]
   (map (remove 'module-hash) (env-events true)))
(commit-tx)

(coin.get-balance 'multi4)
(coin.get-balance 'George)
(coin.get-balance 'Pam)
(coin.get-balance 'Alice)

(begin-tx)
(env-sigs [{'key: "george", 'caps: [(test.delegated-bonding.OPERATOR 'multi4)]}])
(expect "rotate multi4"
   "operator:KeySet {keys: [george],pred: keys-all}"
  (test.delegated-bonding.rotate "multi4"))
(commit-tx)

(begin-tx)
(env-chain-data { 'block-time: (parse-time "%F" "2021-05-08")})
(env-sigs [ {'key: "george",'caps: [(test.delegated-bonding.OPERATOR 'multi5), (test.pool.BONDER "multi5:2021-03-18")]}])
(expect "unbond multi1"
 ["Alice:8003.92" "Pam:2000.98"]
(test.delegated-bonding.unbond 'multi5))
(expect "unbond events multi5"
   [{"name": "test.pool.BONDER","params": ["multi5:2021-03-18"]}
    {"name": "coin.TRANSFER","params": ["relay-bank" "multi5" 10005.0]}
    {"name": "test.pool.FEE","params": ["kda-relay-pool" "multi5:2021-03-18" 5.0]}
    {"name": "test.pool.UNBOND","params": ["kda-relay-pool" "multi5:2021-03-18" 10000.0]}
    {"name": "test.pool.UPDATE","params": ["kda-relay-pool" 150000.0 232973.3]}
    {"name": "coin.TRANSFER","params": ["multi5" "George" 0.1]}
    {"name": "coin.TRANSFER","params": ["multi5" "Alice" 8003.92]}
    {"name": "coin.TRANSFER","params": ["multi5" "Pam" 2000.98]}]
  (map (remove 'module-hash) (env-events true)))
(commit-tx)

(coin.get-balance 'multi5)
(coin.get-balance 'George)
(coin.get-balance 'Pam)
(coin.get-balance 'Alice)

(begin-tx)

(env-sigs [{'key: "george", 'caps: [(test.delegated-bonding.OPERATOR 'multi5)]}])
(expect "rotate multi5"
   "operator:KeySet {keys: [george],pred: keys-all}"
  (test.delegated-bonding.rotate "multi5"))
(commit-tx)


(coin.get-balance 'multi2)
(coin.get-balance 'George)
(coin.get-balance 'Pam)
(coin.get-balance 'Alice)

(begin-tx)
(env-sigs [{'key: "george", 'caps: [(test.delegated-bonding.OPERATOR 'multi6)]}])
(expect "rotate multi6"
   "operator:KeySet {keys: [george],pred: keys-all}"
  (test.delegated-bonding.rotate "multi6"))
(commit-tx)

; stop multi1 (also cannot renew because no activity!! => transfer amount must be positive)
(env-chain-data { 'block-time: (parse-time "%F" "2021-05-07")})
(env-sigs
  [ {'key: "george",'caps: [(test.delegated-bonding.OPERATOR "multi1"), (test.pool.BONDER "multi1:2021-03-17")]}])
(expect "unbond multi1"
 ["Alice:8000.0" "Bob:2000.0"]
 (test.delegated-bonding.unbond "multi1"))
(expect "unbond events multi1"
   [{"name": "test.pool.BONDER","params": ["multi1:2021-03-17"]}
    {"name": "coin.TRANSFER","params": ["relay-bank" "multi1" 10000.0]}
    {"name": "test.pool.FEE","params": ["kda-relay-pool" "multi1:2021-03-17" 0.0]}
    {"name": "test.pool.UNBOND","params": ["kda-relay-pool" "multi1:2021-03-17" 10000.0]}
    {"name": "test.pool.UPDATE","params": ["kda-relay-pool" 140000.0 232973.3]}
    {"name": "coin.TRANSFER","params": ["multi1" "Alice" 8000.0]}
    {"name": "coin.TRANSFER","params": ["multi1" "Bob" 2000.0]}]
  (map (remove 'module-hash) (env-events true)))

(env-chain-data { 'block-time: (parse-time "%F" "2021-05-08")})
(env-sigs
  [ {'key: "george",'caps: [(test.delegated-bonding.OPERATOR "multi6"), (test.pool.BONDER "multi6:2021-03-18")]}])

(expect "unbond multi6"
 ["Alice:8000.0" "Pam:2000.0"]
 (test.delegated-bonding.unbond "multi6"))
(expect "unbond events multi6"
   [{"name": "test.pool.BONDER","params": ["multi6:2021-03-18"]}
    {"name": "coin.TRANSFER","params": ["relay-bank" "multi6" 10000.0]}
    {"name": "test.pool.FEE","params": ["kda-relay-pool" "multi6:2021-03-18" 0.0]}
    {"name": "test.pool.UNBOND","params": ["kda-relay-pool" "multi6:2021-03-18" 10000.0]}
    {"name": "test.pool.UPDATE","params": ["kda-relay-pool" 130000.0 232973.3]}
    {"name": "coin.TRANSFER","params": ["multi6" "Alice" 8000.0]}
    {"name": "coin.TRANSFER","params": ["multi6" "Pam" 2000.0]}]
  (map (remove 'module-hash) (env-events true)))


(coin.get-balance 'multi1)
(coin.get-balance 'George)
(coin.get-balance 'Pam)
(coin.get-balance 'Alice)
