(load "relay.repl")

(env-data
    {  'delegated-bonding-admin: ['admin]
     ,  'ns: 'test
     , 'relay-coin-account: 'delegated-bonding-bank
     , 'lockup: 30
     , 'unlock: 20
     , 'bond: 10000
     , 'upgrade: true
     })

(define-keyset 'delegated-bonding-admin)
(env-keys ['admin])

(load "delegated-bonding.pact")

 (env-data { 'George: ['george], 'Alice: ['alice], 'Admin: ['admin]})
;
 (test-capability (coin.COINBASE))
 (coin.coinbase "George" (read-keyset 'George) 15000.0)
 (coin.coinbase "Alice" (read-keyset 'Alice) 15000.0)
 (coin.coinbase "Admin" (read-keyset 'Admin) 100000.0)

 (env-sigs
   [{'key: "admin",'caps: [(coin.TRANSFER "Admin" 'relay-bank 100000.0)]}])
(test.pool.fund-reserve test.relay.POOL "Admin" 100000.0)
;
(delegated-bonding.new-slot 'multi1 10000.0 (read-keyset 'George) 2.0)
;(delegated-bonding.get-slot-amount 'multi1)
(env-sigs [{'key: "george", 'caps: [(coin.TRANSFER "George" "multi1" 8000.0)] }])
(delegated-bonding.new-tranche "George" "multi1" 8000.0 (read-keyset "George"))

(env-sigs [{'key: "alice", 'caps: [(coin.TRANSFER "Alice" "multi1" 2000.0)] }])
(delegated-bonding.new-tranche "Alice" "multi1" 2000.0 (read-keyset "Alice"))

;(delegated-bonding.get-all-slots)
;(delegated-bonding.get-all-tranches)
;(delegated-bonding.get-slot-tranche-amounts 'multi1)
;(delegated-bonding.get-slot-total-amount 'multi1)
(coin.get-balance 'multi1)

(delegated-bonding.new-multibond 'multi1)

(coin.get-balance 'multi1)

(test.pool.bond-keys)


; (env-sigs
;   [ {'key: "alice",'caps: [(test.relay.BONDER "Alice:2021-01-01")]}
;   ])
; (env-hash (hash 'envhash1))
; (env-chain-data {'prev-block-hash: (hash 'prevblockhash11111)})
; (env-data {'header: { 'hash: "h1", 'number: 1, 'receipts-root: "r1" }})
; (expect "Alice 1 propose"
;   "Write succeeded"
;   (test.relay.propose
;     (read-msg 'header)
;     "Alice:2021-01-01"))
; (expect "propose events"
;   [{"name": "test.relay.PROPOSE"
;   ,"params": [1 "h1" "Alice:2021-01-01"
;     ["Alice:2021-01-02" "Alice:2021-01-03" "Bob:2021-01-01"
;      "Bob:2021-01-02" "Bob:2021-01-03"]]}]
;   (map (remove 'module-hash) (env-events true)))
; (expect-failure "not validated 0"
;   "Not accepted"
;   (test.relay.validate (read-msg 'header)))
;
; ;; endorser simple failures
; (expect-failure "no sig"
;   "Keyset failure"
;   (test.relay.endorse (read-msg 'header) "Bob:2021-01-01"))
; (env-sigs
;   [ {'key: "carol",'caps: [(test.relay.BONDER "Carol:2021-01-03")]}
;   ])
; (expect-failure "wrong sig"
;   "Keyset failure"
;   (test.relay.endorse (read-msg 'header) "Bob:2021-01-01"))
; (expect-failure "not endorser"
;   "Invalid endorser"
;   (test.relay.endorse (read-msg 'header) "Carol:2021-01-03"))
; (env-sigs
;   [ {'key: "bob",'caps: [(test.relay.BONDER "Bob:2021-01-01")]}
;   ])
; (expect-failure "wrong height"
;   "row not found"
;   (test.relay.endorse (+ {'number: 2} (read-msg 'header)) "Bob:2021-01-01"))
; (expect-failure "wrong hash"
;   "not proposed at height"
;   (test.relay.endorse (+ {'hash: "skdfjh"} (read-msg 'header)) "Bob:2021-01-01"))
; (expect-failure "wrong data"
;   "Header mismatch"
;   (test.relay.endorse (+ {'receipts-root: "skdfjh"} (read-msg 'header)) "Bob:2021-01-01"))
;
; ;; endorser success
;
; (env-sigs
;   [ {'key: "bob",'caps: [(test.relay.BONDER "Bob:2021-01-01")]}
;   ])
; (expect "endorse Bob 1"
;   "Write succeeded"
;   (test.relay.endorse (read-msg 'header) "Bob:2021-01-01"))
; (expect "endorse events"
;    [ {"name": "test.relay.ENDORSE","params": ["h1" "Bob:2021-01-01" false]}
;      {"name": "test.pool.ACTIVITY","params": ["kda-relay-pool" "Bob:2021-01-01" 1]}
;    ]
;   (map (remove 'module-hash) (env-events true)))
; (expect "activity 1"
;   1
;   (at 'activity (test.pool.get-bond "Bob:2021-01-01")))
; (expect-failure "not validated 1"
;   "Not accepted"
;   (test.relay.validate (read-msg 'header)))
;
; (expect-failure "dupe failure"
;   "Duplicate endorse"
;   (test.relay.endorse (read-msg 'header) "Bob:2021-01-01"))
;
;
; (env-sigs
;   [ {'key: "bob",'caps: [(test.relay.BONDER "Bob:2021-01-02")]}
;   ])
; (expect "endorse Bob 2"
;   "Write succeeded"
;   (test.relay.endorse (read-msg 'header) "Bob:2021-01-02"))
; (expect "endorse events"
;    [ {"name": "test.relay.ENDORSE","params": ["h1" "Bob:2021-01-02" false]}
;      {"name": "test.pool.ACTIVITY","params": ["kda-relay-pool" "Bob:2021-01-02" 1]}
;    ]
;   (map (remove 'module-hash) (env-events true)))
; (expect "activity 2"
;   1
;   (at 'activity (test.pool.get-bond "Bob:2021-01-02")))
; (expect-failure "not validated 2"
;   "Not accepted"
;   (test.relay.validate (read-msg 'header)))
;
; (env-sigs
;   [ {'key: "alice",'caps: [(test.relay.BONDER "Alice:2021-01-02")]}
;   ])
; (expect "endorse Alice 2"
;   "Write succeeded"
;   (test.relay.endorse (read-msg 'header) "Alice:2021-01-02"))
; (expect "endorse events"
;    [ {"name": "test.relay.ENDORSE","params": ["h1" "Alice:2021-01-02" true]}
;      {"name": "test.pool.ACTIVITY","params": ["kda-relay-pool" "Alice:2021-01-02" 1]}
;    ]
;   (map (remove 'module-hash) (env-events true)))
; (expect "activity 3"
;   1
;   (at 'activity (test.pool.get-bond "Alice:2021-01-02")))
; (expect "validated 3" true
;   (test.relay.validate (read-msg 'header)))
; (env-sigs
;   [ {'key: "bob",'caps: [(test.relay.BONDER "Bob:2021-01-03")]}
;   ])
; (expect-failure "already accepted"
;   "Block not proposed at height"
;   (test.relay.endorse (read-msg 'header) "Bob:2021-01-03"))


(env-chain-data { 'block-time: (parse-time "%F" "2021-03-20")})
(coin.get-balance 'George)
(coin.get-balance 'Alice)

; ERROR TRANSFER AMOUNT MUST BE POSITIVE WHEN NO ACTIVITY (transfer "relay-bank" "multi1" 0.0)
;(delegated-bonding.renew-multibond 'multi1)
(coin.get-balance 'George)
(coin.get-balance 'Alice)

;(coin.get-balance 'Alice)
;(env-sigs [{'key: "alice", 'caps: [(coin.TRANSFER "Alice" "multi1" 3000.0)] }])
;(delegated-bonding.new-tranche "Alice" "multi1" 3000.0 (read-keyset "Alice"))


;(env-sigs [  {'key: "george",'caps: [(coin.TRANSFER "George" 'delegated-bonding-pool 2000.0)]}, {'key: "alice",'caps: [(coin.TRANSFER "Alice" 'delegated-bonding-pool 8000.0)]}])
;(delegated-bonding.new-multibond {'size: 10000.0, 'tranches: [{'account: "George", 'amount: 2000.0}, {'account: "Alice", 'amount: 8000.0}]} "delegated-bonding-pool")
